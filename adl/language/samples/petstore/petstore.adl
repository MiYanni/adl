model Ok<T> {
  @header statusCode: 200;
  ... T;
}

model Pet {
  name: string;
  tag?: string;
}

model Error {
  code: int32;
  message: string;
}

model Toy {
  id: int64;
  petId: int64;
  name: string;
}

model NotModified<T> {
  @header statusCode: 304;
  ... T;
}

model Page<T> {
  items: T[];
  nextLink: string;
}

model PetId {
  @path petId: int32;
}

"""
Manage your pets
"""
@resource("/pets")
interface PetsResource {
  """
  Delete a pet.
  """
  delete(... PetId): Ok<{}> | Error;

  @description("list pets")
  list(@query nextLink?: string): Ok<Page<Pet>> | Error;

  @description("Returns a pet. Supports eTags.")
  read(... PetId): Ok<Pet> | NotModified<Pet> | Error;

  create(@body pet: Pet): Ok<Pet> | Error;
}

@resource("/pets/{petId}/toys")
interface ListPetToysResponse {
  list(@path petId: string, @query nameFilter: string): Ok<Page<Toy>> | Error;
}